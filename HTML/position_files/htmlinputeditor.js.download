var htmlInputEditor = {
	/*
	*
	*
	* Written By Brian Workman
	* You can set the class vars as either singular or as arrays if you have multiple text inputs on your screen. For example if you wanted
	* to have two html editors on your screen but you wanted one to have a max length of 200 and the other to 500 just set maxLength to [200, 500]
	* the same logic follows for each class variable. 
	* 
	*
	
	USAGE: To add input boxes to your page just add the following html
	<div id="yourIdIfNeeded" class="addInputEditor"></div>
	
	THEN INITIALIZE IT AND SET SOME OPTIONS IF YOU NEED TO
	htmlInputEditor.init({
		maxLength: [500, 250],
		inputClasses: ['form-control', 'form-control second-class-second-box'],
		showCounterError: true, // TURNS ON THE WARNINGS WHEN A USER GETS CLOSE AND HITS THE MAX LENGTH
	});
	
	TO SET THE VALUES OF THE TEXTBOX CALL the setInputValue function
	$('#option').on('change', function() {
		htmlInputEditor.setInputValue('yourIdIfNeeded', $(this).val());
	});

	TO SET THE VALUES OF THE TEXTBOX WITHOUT AJAX SIMPLY SET THE VALUE INSIDE THE DIV(addInputEditor) with another div (textBoxAreaValue)
	<div id="yourIdIfNeeded" class="addInputEditor">
		<div class="textBoxAreaValue hide"><?php echo $valueoftextbox; ?></div>
	</div>

	*
	*/
	maxLength: 0,
	minHeight: 200,
	inputName: 'textinput',
	inputClasses: 'form-control',
	inputId: '',
	textareaId: '',
	showCounterError: true,
	addURLButton: false,
	
	init: function(options) {
		htmlInputEditor.setUserOptions(options);
		htmlInputEditor.setHTMLInputEditors();
		htmlInputEditor.highlightVarNodes();
		htmlInputEditor.listenForInputChanges();
		htmlInputEditor.createURLFromHighlightedText();

        $('body').on('click', '.htmlInputTextField', function() {
			htmlInputEditor.setCursorPosition(event.target);
		});
	},
	
	setUserOptions: function(options) {
		if(options != '') {
			for(var name in options) {
				switch(name) {
					case 'maxLength':
						htmlInputEditor.maxLength = options[name];
						break;
					case 'minHeight':
						htmlInputEditor.minHeight = options[name];
						break;
					case 'inputName':
						htmlInputEditor.inputName = options[name];
						break;
					case 'inputClasses':
						htmlInputEditor.inputClasses = options[name];
						break;
					case 'inputId':
						htmlInputEditor.inputId = options[name];
						break;

					case 'textareaId':
						htmlInputEditor.textareaId = options[name];
						break;
					case 'showCounterError':
						htmlInputEditor.showCounterError = options[name];
						break;
					case 'addURLButton':
						htmlInputEditor.addURLButton = options[name];
						break;
				}
			}
		}
	},
	
	listenForInputChanges: function() {
		$('body').on('keyup focusout', '.htmlInputTextField', function() {
			var elem = $(this);
			var text = elem.html();
			
			htmlInputEditor.checkForMaxCharacterLength(elem, text);

			/* TRYING TO REMOVE "SMART" PUNCTUATION */
			var val = elem.html();
            val.replace(/[\u2018\u2019\u201C\u201D]/g, (val) => '\'\'""'.substr('\u2018\u2019\u201C\u201D'.indexOf(val), 1));
            elem.parent().find('.htmlInputTextArea').val(val);
		});
	},
	
	selectElementText: function(elem){
        $(elem).remove();
	},

    placeCaretAtEnd: function(el) {
		el.focus();
		if (typeof window.getSelection != "undefined"
			&& typeof document.createRange != "undefined") {
			var range = document.createRange();
			range.selectNodeContents(el);
			range.collapse(false);
			var sel = window.getSelection();
			sel.removeAllRanges();
			sel.addRange(range);
		} else if (typeof document.body.createTextRange != "undefined") {
			var textRange = document.body.createTextRange();
			textRange.moveToElementText(el);
			textRange.collapse(false);
			textRange.select();
		}
	},

	setHTMLInputEditors: function() {

		if($('.addInputEditor').length > 0) {

			$('.addInputEditor').each(function(i) {
                var setValue = $(this).find('div').length > 0 ? $(this).find('div').html() : '';
				var inputEditor = '';

                if(htmlInputEditor.addURLButton) {
                    inputEditor = '<div class="btn btn-primary createTextLink btn-sm pull-right" title="Create Link"><i class="fa fa-link"></i></div>';
                }

				inputEditor += '<div contenteditable="true" ';
				if(htmlInputEditor.inputId.constructor.name == 'Array') {
					if(typeof htmlInputEditor.inputId[i] != 'undefined') {
						inputEditor += 'id="'+htmlInputEditor.inputId[i]+'" ';
					} else if(typeof htmlInputEditor.inputId[0] != 'undefined') {
						inputEditor += 'id="'+htmlInputEditor.inputId[0]+'" ';
					} else {
						console.warn('It looks like you screwed up your htmlInputEditor inputIdOption setting. Either set it or remove it');
					}
				} else {
					inputEditor += 'id="'+htmlInputEditor.inputId+'" ';
				}
				
				if(htmlInputEditor.maxLength.constructor.name == 'Array') {
					if(typeof htmlInputEditor.maxLength[i] != 'undefined') {
						inputEditor += 'data-maxlength="'+htmlInputEditor.maxLength[i]+'" ';
					} else if(typeof htmlInputEditor.maxLength[0] != 'undefined') {
						inputEditor += 'data-maxlength="'+htmlInputEditor.maxLength[0]+'" ';
					} else {
						console.warn('It looks like you screwed up your htmlInputEditor maxLength setting. Either set it or remove it');
					}
				} else {
					inputEditor += 'data-maxlength="'+htmlInputEditor.maxLength+'" ';
				}
				
				if(htmlInputEditor.inputClasses.constructor.name == 'Array') {
					if(typeof htmlInputEditor.inputClasses[i] != 'undefined') {
						inputEditor += 'class="'+htmlInputEditor.inputClasses[i]+' htmlInputTextField" ';
					} else if(typeof htmlInputEditor.inputClasses[0] != 'undefined') {
						inputEditor += 'class="'+htmlInputEditor.inputClasses[0]+' htmlInputTextField" ';
					} else {
						console.warn('It looks like you screwed up your htmlInputEditor inputClasses setting. Either set it or remove it');
					}
				} else {
					inputEditor += 'class="'+htmlInputEditor.inputClasses+' htmlInputTextField" ';
				}
				
				if(htmlInputEditor.minHeight.constructor.name == 'Array') {
					if(typeof htmlInputEditor.minHeight[i] != 'undefined') {
						inputEditor += 'style="min-height:'+htmlInputEditor.minHeight[i]+'px;overflow-x:hidden;overflow-y:scroll;">';
					} else if(typeof htmlInputEditor.minHeight[0] != 'undefined') {
						inputEditor += 'style="min-height:'+htmlInputEditor.minHeight[0]+'px;overflow-x:hidden;overflow-y:scroll;">';
					} else {
						console.warn('It looks like you screwed up your htmlInputEditor minHeight setting. Either set it or remove it');
					}
				} else {
					inputEditor += 'style="min-height:'+htmlInputEditor.minHeight+'px;overflow-x:hidden;overflow-y:scroll;">';
				}
				
				inputEditor += setValue;
				inputEditor += '</div>';

				if(htmlInputEditor.textareaId.constructor.name == 'Array') {
					if(typeof htmlInputEditor.textareaId[i] != 'undefined') {
						inputEditor += '<textarea id="'+htmlInputEditor.textareaId[i]+'" class="hidden htmlInputTextArea"';
					} else if(typeof htmlInputEditor.textareaId[0] != 'undefined') {
						inputEditor += '<textarea id="'+htmlInputEditor.textareaId[0]+'" class="hidden htmlInputTextArea"';
					} else {
						console.warn('It looks like you screwed up your htmlInputEditor textareaId setting. Either set it or remove it');
					}
				} else {
					inputEditor += '<textarea id="'+htmlInputEditor.textareaId+'" class="hidden htmlInputTextArea" ';
				}
				

				if(htmlInputEditor.inputName.constructor.name == 'Array') {
					if(typeof htmlInputEditor.inputName[i] != 'undefined') {
						inputEditor += ' name="'+htmlInputEditor.inputName[i]+'">';
					} else if(typeof htmlInputEditor.inputName[0] != 'undefined') {
						inputEditor += ' name="'+htmlInputEditor.inputName[0]+'">';
					} else {
						console.warn('It looks like you screwed up your htmlInputEditor inputName setting. Either set it or remove it');
					}
				} else {
					inputEditor += ' name="'+htmlInputEditor.inputName+'">';
				}

                inputEditor += setValue;
                inputEditor += '</textarea>';
				inputEditor += '</div>';

				$(this).html(inputEditor);

			});
			
		} else {
			console.warn('HTML Input Editor Called But No Element Was Found With A Class Of addInputEditor, add an element with a class of .addInputEditor and ill take care of the rest');
		}
	},

	setCursorPosition: function(target, isStart) {
		const range = document.createRange();
		const sel = window.getSelection();
		if (isStart) {
			const newText = document.createTextNode('');
			target.appendChild(newText);
			range.setStart(target.childNodes[0], 0);
		} else {
			range.selectNodeContents(target);
		}
		range.collapse(isStart);
		sel.removeAllRanges();
		sel.addRange(range);
		target.focus();
	},

    setCursorToEndById: function(elem) {
        elem.focus();
		if (typeof window.getSelection != "undefined"
			&& typeof document.createRange != "undefined") {
			var range = document.createRange();
			range.selectNodeContents(elem);
			range.collapse(false);
			var sel = window.getSelection();
			sel.removeAllRanges();
			sel.addRange(range);
		} else if (typeof document.body.createTextRange != "undefined") {
			var textRange = document.body.createTextRange();
			textRange.moveToElementText(elem);
			textRange.collapse(false);
			textRange.select();
		}
	},

	checkForMaxCharacterLength: function(elem, text) {
		var max = elem.attr('data-maxlength');
		if(max > 0) {			
			if(text.length >= max) {
				text = text.substring(0, max);
				elem.parent().find('.htmlInputTextArea').html(text);
				elem.parent().find('.htmlInputTextField').html(text);

				htmlInputEditor.setCursorPosition(event.target);
				
				if(htmlInputEditor.showCounterError) {
					htmlInputEditor.removeMaxLengthInputWarning(elem);
					elem.parent().append('<div class="maxLengthWarning text-danger">You\'ve reached the max length this field can accept (' + text.length + ' of ' + max + ' characters)</div>');
				}
				
			} else if(text.length > (max/1.2) && text.length < max) {
				if(htmlInputEditor.showCounterError) {
					htmlInputEditor.removeMaxLengthInputWarning(elem);
					elem.parent().append('<div class="maxLengthWarning text-warning">You\'re getting close to the max character count of input ('+text.length+' of '+max+')</div>');
				}
			} else {
				if(htmlInputEditor.showCounterError) {
					htmlInputEditor.removeMaxLengthInputWarning(elem);
				}
			}
		}
	},
	
	highlightVarNodes: function() {
		$('body').on('click', '.htmlInputTextField', function(event) {
			var target = event.target.nodeName;
			if(target == 'VAR') {
                $(event.target).remove();
			}
		});
	},
	
	removeMaxLengthInputWarning: function(elem) {
		elem.parent().find('.maxLengthWarning').remove();
	},

	createURLFromHighlightedText: function()
	{
		$('body').on('click', '.createTextLink', function() {
            var selection = window.getSelection();
            var currentInput = $(this).parent().find('.htmlInputTextArea').val();
            if (selection.toString() != '') {
                var url = prompt('Please enter the URL:', '');
                if(url === null) {
					/* HIT CANCEL DO NOTHING */
                } else {
                    if (htmlInputEditor.checkIfValidUrl(url)) {
                        url = url.toLowerCase();
                        var sel = window.getSelection();
                        if (sel.rangeCount) {
                            var container = document.createElement("div");
                            for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                                container.appendChild(sel.getRangeAt(i).cloneContents());

                                var selectedText = container.innerHTML.trim();
								if(currentInput.indexOf(selectedText) !== -1) {
                                    var newUrl = document.createElement('a');
                                    var range = sel.getRangeAt(i);
                                    range.deleteContents();
									if(url.indexOf('http') === -1) {
                                        url = 'http://'+url;
									}
                                    newUrl.setAttribute('href', url);
                                    newUrl.setAttribute('target', '_blank');
                                    $(newUrl).html(container.innerHTML);

                                    range.insertNode(newUrl);

                                    $('.htmlInputTextField').each(function () {
                                        $(this).trigger('focusout')
                                    });

                                    window.getSelection().addRange(range);
                                } else {
                                    alert('The selected text must be inside the input box!');
								}
                            }
                        }
                    }
                }
            } else {
            	alert('Select some text first before trying to make it a url');
			}
		});
	},

	checkIfValidUrl: function(url) {
		url = url.toLowerCase();
		var pattern =  /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-zA-Z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-zA-Z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
		if (!pattern.test(url)) {
			alert("Please enter a valid URL.");
			return false;
		} else {
			return true;
		}

	},

	destroy: function() {
		$('body').off('change', '.htmlInputTextField');
		$('body').off('click', '.htmlInputTextField');
		$('body').off('keyup', '.htmlInputTextField');
		$('body').off('keydown', 'div[contenteditable]');
		$('body').off('click', '.createTextLink');
		$('.htmlInputEditor').remove();
	},
	
	/*
	* Pass in the id of the wrapper for the editor and the value you want the editor to be set to to set the values
	*/
	setInputValue: function(inputId, val) {
		$('#'+inputId).find('.htmlInputTextField').html(val);
        val = val.replace(/[\u2018\u2019\u201C\u201D]/g, (val) => '\'\'""'.substr('\u2018\u2019\u201C\u201D'.indexOf(val), 1));
		$('#'+inputId).find('.htmlInputTextArea').val(val);

		$('.htmlInputTextField').trigger('change');

	},

    getCaretCharacterOffsetWithin: function(element) {
		var caretOffset = 0;
		var doc = element.ownerDocument || element.document;
		var win = doc.defaultView || doc.parentWindow;
		var sel;
		if (typeof win.getSelection != "undefined") {
			sel = win.getSelection();
			if (sel.rangeCount > 0) {
				var range = win.getSelection().getRangeAt(0);
				var preCaretRange = range.cloneRange();
				preCaretRange.selectNodeContents(element);
				preCaretRange.setEnd(range.endContainer, range.endOffset);
				caretOffset = preCaretRange.toString().length;
			}
		} else if ( (sel = doc.selection) && sel.type != "Control") {
			var textRange = sel.createRange();
			var preCaretTextRange = doc.body.createTextRange();
			preCaretTextRange.moveToElementText(element);
			preCaretTextRange.setEndPoint("EndToEnd", textRange);
			caretOffset = preCaretTextRange.text.length;
		}
		return caretOffset;
	},

    setCurrentCursorPosition: function(elemId, chars) {
		if (chars >= 0) {
            document.getElementById(elemId).focus();
			var selection = window.getSelection();
			range = document.createRange(document.getElementById(elemId).parentNode, { count: chars });

			if (range) {
				range.collapse(false);
				selection.removeAllRanges();
				selection.addRange(range);
			}
		}
	}


}


