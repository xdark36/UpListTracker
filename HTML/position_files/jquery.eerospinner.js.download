/* ==============================================================================
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
;(function ($) {
    $.fn.eerospinner = function (opts) {
        return this.each(function () {
      if($(this).parent().hasClass('eerospinner')){
          return;
      }
      var defaults = {value:0, min:0,max:99,change:null}
      var options = $.extend(defaults, opts);
      var keyCodes = {up:38, down:40};
      var container = $('<div></div>');

      container.addClass('eerospinner');
      if($(this).val()!=''){options.value=$(this).val();}
      var textField = $(this).addClass('value').attr('maxlength', '2').attr('disabled', true).attr('readonly', true).val(options.value)
        .focus(function (){ $(this).val(''); })
        .on('keyup paste change', function (e) {
			if (!ShopdataUI.isManager || !ShopdataUI.isCartReadOnly)
    		{
	          var field = $(this);
	          var key = e.which || e.keyCode;
	          var waittime = (key==13 ? 0 : 3000);
	          var t = setTimeout(function () {
	        	  if ( (key >= 48 && key <= 57) 
	        			  || (key >= 96 && key <= 105) 
	        			  || key == 8 || key == 13 )
	        	  { 
	        		  changeValueByNumberPad(e,getValue(field)); 
	    		  }
	              else if (key == keyCodes.up) changeValue(e,1);
	              else if (key == keyCodes.down) changeValue(e,-1);
	              else if (getValue(field) != container.data('lastValidValue')) validateAndTrigger(e,field)
	    	  }, waittime);
    		}
        });
      textField.wrap(container);

      var increaseButton = $('<button class="increase">+</button>').click(function () {
    	if (!ShopdataUI.isManager || !ShopdataUI.isCartReadOnly)
		{
    	  changeValue(arguments[0],1);
		}
      });
      var decreaseButton = $('<button class="decrease">-</button>').click(function () {
    	if (!ShopdataUI.isManager || !ShopdataUI.isCartReadOnly)
  		{
    		changeValue(arguments[0],-1);
  		}
      });

      validate(textField);
      container.data('lastValidValue', options.value);
      if (textField.prop('disabled')){
      	textField.before(decreaseButton);
        textField.after(increaseButton);
      } else {
      	textField.before(decreaseButton);
      	textField.after(increaseButton);
      }
      
      function changeValue(e,delta) {
          textField.val(getValue() + delta);
          validateAndTrigger(e,textField)
      }
      
      function changeValueByNumberPad(e,newvalue) {
        textField.val(newvalue);
        validateAndTrigger(e,textField)
      }

      function validateAndTrigger(e,field) {
        clearTimeout(container.data('timeout'));
        var value = validate(field);
        if (!isInvalid(value)) {
          textField.trigger('update', [field, value]);
          if(options.change!=null){
              options.change(e,field);
          }
        }
      }

      function validate(field) {
        var value = getValue();
        if (value <= options.min) decreaseButton.attr('disabled', 'disabled');
        else decreaseButton.removeAttr('disabled');
        field.toggleClass('invalid', isInvalid(value)).toggleClass('passive', value === 0);

        if (isInvalid(value)) {
          var timeout = setTimeout(function () {
            textField.val(container.data('lastValidValue'));
            validate(field)
          }, 500);
          container.data('timeout', timeout)
        } else {
          container.data('lastValidValue', value)
        }
        return value;
      }

      function isInvalid(value) { return value < options.min || value > options.max || isNaN(parseFloat(value)) || !isFinite(value);}

      function getValue(field) {
        field = field || textField;
        return parseInt(field.val() || 0, 10)
      }
      
    })
  }
})(jQuery);
